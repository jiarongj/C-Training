// You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
// You may assume the two numbers do not contain any leading zero, except the number 0 itself.
// Example
// Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
// Output: 7 -> 0 -> 8
//Explanation: 342 + 465 = 807.

class Solution {   
public:
    struct ListNode* addTwoNumbers(struct ListNode* l1, struct ListNode* l2) {
    int carry_on = 0, sum;
    struct ListNode* final_result = (struct ListNode*) malloc(sizeof(struct ListNode));
    struct ListNode* current = final_result;
    struct ListNode* tail;
    final_result->val = 0;
    final_result->next = NULL;
        
    if (!l1 && !l2){
        goto end;
    }
    while(true){
    sum = (l1?l1->val:0) + (l2?l2->val:0) + carry_on;    
    current->val = sum % 10;  //module;
    if (sum>9) {carry_on = 1;}
    else {carry_on = 0;}   
        
    l1 = l1? l1->next:l1;  //l1={if l1 is true, return l1->next to l1, else return l1 to l1;}
    l2 = l2? l2->next:l2;
    
    if (!l1 && !l2 && !carry_on){
        break;  //if l1,l2 and carry_on ended, break command will bring us to the following step: use tail to end the structure;
    }
        
    tail = (struct ListNode*) malloc(sizeof(struct ListNode));
    tail->next = NULL;   //point tail's next to NULL;
    current->next = tail;  //point current's next to tail;
    current = tail; //end directly at the current as end;
    }
    end: return final_result;
    }
};
