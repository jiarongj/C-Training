// Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.
// Example:
// Input: [-2,1,-3,4,-1,2,1,-5,4],
// Output: 6
// Explanation: [4,-1,2,1] has the largest sum = 6.



class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        int sum_max = nums[0];
        if (nums.size()==0){sum_max = NULL;}
        for (int i=0; i<nums.size();++i){
             int sum = 0;            
            for (int j=0; j<nums.size()-i;++j){
                if (nums[i+j]<0){sum = sum - abs(nums[i+j]);}
                else{sum = sum + nums[i+j];}
                if (sum>sum_max){sum_max = sum;}
            }            
        }
        return sum_max;
    }
};
