// Given a string containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

// An input string is valid if:

// Open brackets must be closed by the same type of brackets.
// Open brackets must be closed in the correct order.
// Note that an empty string is also considered valid.



#include <stack>

class Solution {
public:
    bool isValid(string s) {
        stack <char> stac;     //use the stack with elements as charactors;
        for (char&c:s){        //go from the address of c through the whole string;
         switch (c){           //switch(c){case 'a':result;break; case 'b': result;break; ... ;default:;} the judgement frame
            case '(':
            case '[':
            case '{': stac.push(c); break;
            case ')':if(stac.empty()||stac.top()!='('){return false;}else{stac.pop();}break;
            case ']':if(stac.empty()||stac.top()!='['){return false;}else{stac.pop();}break;
            case '}':if(stac.empty()||stac.top()!='{'){return false;}else{stac.pop();}break;  
            default:;
         }
         }
        return stac.empty();  //a bool value, if all the repairs feedbacked, stac would be empty, return true;
    }
};
