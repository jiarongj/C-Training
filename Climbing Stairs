
You are climbing a stair case. It takes n steps to reach to the top. Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?
Note: Given n will be a positive integer.

Example 1:
Input: 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps

Example 2:
Input: 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step


class Solution {       // Not suggested, only 21 / 45 test cases passed.      
public:
    long climbStairs(int n) {
        long count = 1;
        if (n<3) {return n;}
        for(int i=1; i<= n/2; ++i){     // possible number of '2 steps';    
            count += fact(n-i) / (fact(i)*fact(n-2*i));
        }        
        return count;
    }
    
    long fact(long x){       
        long p = 1;
        if(x <= 0 ) {
            return p;
        } else {   
        for(long i = x; i > 0; --i){
               p = p*i;
            }
        }
        return p;
    }
};
